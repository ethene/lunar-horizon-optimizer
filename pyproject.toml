# Lunar Horizon Optimizer - Python Project Configuration
# Unified configuration for all development tools

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lunar-horizon-optimizer"
version = "1.0.0"
description = "Integrated differentiable trajectory optimization and economic analysis platform for LEO-Moon missions"
authors = [
    {name = "Lunar Horizon Optimizer Development Team"}
]
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "pydantic>=2.0.0",
    "jax>=0.4.20",
    "diffrax>=0.4.1",
]

[project.optional-dependencies]
dev = [
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "radon>=6.0.1",
    "xenon>=0.9.0",
    "sourcery>=1.14.0",
    "bandit>=1.7.5",
    "pre-commit>=3.6.0",
]

orbital = [
    "pykep>=2.6",
    "pygmo>=2.19.0",
    "spiceypy>=6.0.0",
    "astropy>=5.3.0",
]

[project.urls]
Homepage = "https://github.com/ethene/lunar-horizon-optimizer"
Repository = "https://github.com/ethene/lunar-horizon-optimizer.git"
Documentation = "https://github.com/ethene/lunar-horizon-optimizer/docs"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration - Production-focused, ignoring non-critical issues
[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
# Focus only on critical errors that affect functionality, security, and bugs
select = [
    "F",    # pyflakes - undefined names, unused imports, etc.
    "E9",   # Runtime/syntax errors (E901, E902, etc.)
    "B",    # flake8-bugbear - likely bugs and design problems
    "S",    # flake8-bandit - security issues
    "C90",  # mccabe - overly complex functions only
    "W605", # Invalid escape sequence (functionality issue)
    "E711", # Comparison to None should be 'is' or 'is not'
    "E712", # Comparison to True should be 'is' or 'is not' 
    "E713", # Test for membership should be 'not in'
    "E714", # Test for object identity should be 'is not'
]

ignore = [
    # Allow non-critical style and documentation issues
    "D",     # All docstring requirements
    "ANN",   # All type annotation requirements  
    "N",     # All naming convention issues
    "E501",  # Line too long (not critical)
    "E402",  # Module level import not at top (allow strategic imports)
    "ARG",   # Unused arguments (common in interfaces)
    "PLR",   # Pylint refactor suggestions (style, not bugs)
    "PTH",   # Use pathlib (style preference)
    "ERA",   # Commented code (may be intentional)
    "G004",  # Logging f-string (performance, not critical)
    "DTZ",   # Datetime timezone (context dependent)
    "BLE001", # Blind except (sometimes necessary)
    "FBT",   # Boolean traps (design choice)
    "T20",   # Print statements (needed in CLI)
    "C4",    # Comprehension improvements (style)
    "UP",    # Python upgrade suggestions (compatibility)
    "SIM",   # Simplify suggestions (style)
    "RET",   # Return style (preference)
    "TRY",   # Exception handling style
    "COM",   # Comma style
    "ISC",   # String concatenation style
    "ICN",   # Import conventions
    "PIE",   # Misc improvements (style)
    "PT",    # Pytest style
    "Q",     # Quote style
    "RSE",   # Raise style
    "SLF",   # Private access (sometimes needed)
    "TID",   # Tidy imports (style)
    "TCH",   # Type checking imports (optimization)
    "EM",    # Exception message style
    "EXE",   # Executable style
    "INP",   # No pep420 (project structure choice)
    "PGH",   # Pygrep hooks (misc)
    "PD",    # Pandas vet (not using pandas heavily)
    "NPY",   # Numpy vet (allow current patterns)
    "RUF",   # Ruff specific (may be overly strict)
    "A",     # Builtin shadowing (context dependent)
    "YTT",   # 2020 compatibility
    "T10",   # Debugger (may be intentional)
    "S301",  # Allow pickle usage with nosec annotations
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D", "ANN", "F401", "S110", "E902", "S603", "S311"]  # Allow test-specific patterns
"src/config/*" = ["B904"]  # Config modules can use simple exception messages
"src/trajectory/validation/*" = ["B904"]  # Validation modules can use simple exception messages

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 15  # Allow reasonable complexity for scientific computing

# MyPy configuration
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "pykep.*",
    "pygmo.*",
    "spiceypy.*",
    "plotly.*",
    "jax.*",
    "diffrax.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_possible in some contexts

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]